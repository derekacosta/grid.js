{"ast":null,"code":"var _jsxFileName = \"/Users/standarduser/Documents/CompSci/Personals/grid.js/src/Print.tsx\";\nimport React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\n\nconst pxToMm = px => {\n  return Math.floor(px / document.getElementById(\"myMm\").offsetHeight);\n};\n\nconst mmToPx = mm => {\n  return mm * document.getElementById(\"myMm\").offsetHeight;\n};\n\nconst range = (start, end) => {\n  return Array(end - start).join(\"0\").split(\"0\").map(function (val, id) {\n    return id + start;\n  });\n};\n\nconst PrintButton = ({\n  id\n}) => React.createElement(\"div\", {\n  className: \"tc mb4 mt2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  id: \"myMm\",\n  style: {\n    height: \"1mm\"\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}), React.createElement(\"div\", {\n  className: \"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\",\n  onClick: () => {\n    const input = document.getElementById(id);\n    const inputHeightMm = pxToMm(input.offsetHeight);\n    const a4WidthMm = 210;\n    const a4HeightMm = 297;\n    const a4HeightPx = mmToPx(a4HeightMm);\n    const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm / a4HeightMm) + 1;\n    console.log({\n      input,\n      inputHeightMm,\n      a4HeightMm,\n      a4HeightPx,\n      numPages,\n      range: range(0, numPages),\n      comp: inputHeightMm <= a4HeightMm,\n      inputHeightPx: input.offsetHeight\n    });\n    html2canvas(input).then(canvas => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      let pdf = null; // Document of a4WidthMm wide and inputHeightMm high\n\n      if (inputHeightMm > a4HeightMm) {\n        // elongated a4 (system print dialog will handle page breaks)\n        pdf = new jsPDF(\"l\", \"pt\", [inputHeightMm + 16, a4WidthMm]);\n      } else {\n        // standard a4\n        pdf = new jsPDF();\n      }\n\n      pdf.addImage(imgData, \"PNG\", 0, 0);\n      pdf.save(\"\".concat(id, \".pdf\"));\n    }); ////////////////////////////////////////////////////////\n    // System to manually handle page breaks\n    // Wasn't able to get it working !\n    // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n    // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n    ////////////////////////////////////////////////////////\n    // range(0, numPages).forEach((page) => {\n    //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n    //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n    //     .then((canvas) => {\n    //       const imgData = canvas.toDataURL('image/png');\n    //       console.log(imgData)\n    //       if (page > 0) {\n    //         pdf.addPage();\n    //       }\n    //       pdf.addImage(imgData, 'PNG', 0, 0);\n    //     });\n    //   ;\n    // });\n    // setTimeout(() => {\n    //   pdf.save(`${id}.pdf`);\n    // }, 5000);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, \"Test\"));\n\nexport default PrintButton;","map":{"version":3,"sources":["/Users/standarduser/Documents/CompSci/Personals/grid.js/src/Print.tsx"],"names":["React","html2canvas","jsPDF","pxToMm","px","Math","floor","document","getElementById","offsetHeight","mmToPx","mm","range","start","end","Array","join","split","map","val","id","PrintButton","height","input","inputHeightMm","a4WidthMm","a4HeightMm","a4HeightPx","numPages","console","log","comp","inputHeightPx","then","canvas","imgData","toDataURL","pdf","addImage","save"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\n\nconst pxToMm = (px: number) => {\n  return Math.floor(px / document.getElementById(\"myMm\")!.offsetHeight);\n};\n\nconst mmToPx = (mm: number) => {\n  return mm * document.getElementById(\"myMm\")!.offsetHeight;\n};\n\nconst range = (start: any, end: any) => {\n  return Array(end - start)\n    .join(\"0\")\n    .split(\"0\")\n    .map(function(val, id) {\n      return id + start;\n    });\n};\n\nconst PrintButton = ({ id }: any) => (\n  <div className=\"tc mb4 mt2\">\n    {/*\n    Getting pixel height in milimeters:\n    https://stackoverflow.com/questions/7650413/pixel-to-mm-equation/27111621#27111621\n  */}\n    <div id=\"myMm\" style={{ height: \"1mm\" }} />\n\n    <div\n      className=\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\"\n      onClick={() => {\n        const input: any = document.getElementById(id);\n        const inputHeightMm: any = pxToMm(input!.offsetHeight);\n        const a4WidthMm = 210;\n        const a4HeightMm = 297;\n        const a4HeightPx = mmToPx(a4HeightMm);\n        const numPages =\n          inputHeightMm <= a4HeightMm\n            ? 1\n            : Math.floor(inputHeightMm / a4HeightMm) + 1;\n        console.log({\n          input,\n          inputHeightMm,\n          a4HeightMm,\n          a4HeightPx,\n          numPages,\n          range: range(0, numPages),\n          comp: inputHeightMm <= a4HeightMm,\n          inputHeightPx: input!.offsetHeight\n        });\n\n        html2canvas(input!).then(canvas => {\n          const imgData = canvas.toDataURL(\"image/png\");\n          let pdf = null;\n          // Document of a4WidthMm wide and inputHeightMm high\n          if (inputHeightMm > a4HeightMm) {\n            // elongated a4 (system print dialog will handle page breaks)\n            pdf = new jsPDF(\"l\", \"pt\", [inputHeightMm + 16, a4WidthMm]);\n          } else {\n            // standard a4\n            pdf = new jsPDF();\n          }\n\n          pdf.addImage(imgData, \"PNG\", 0, 0);\n          pdf.save(`${id}.pdf`);\n        });\n\n        ////////////////////////////////////////////////////////\n        // System to manually handle page breaks\n        // Wasn't able to get it working !\n        // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n        // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n        ////////////////////////////////////////////////////////\n        // range(0, numPages).forEach((page) => {\n        //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n        //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n        //     .then((canvas) => {\n        //       const imgData = canvas.toDataURL('image/png');\n        //       console.log(imgData)\n        //       if (page > 0) {\n        //         pdf.addPage();\n        //       }\n        //       pdf.addImage(imgData, 'PNG', 0, 0);\n        //     });\n        //   ;\n        // });\n\n        // setTimeout(() => {\n        //   pdf.save(`${id}.pdf`);\n        // }, 5000);\n      }}\n    >\n      Test\n    </div>\n  </div>\n);\n\nexport default PrintButton;\n"]},"metadata":{},"sourceType":"module"}