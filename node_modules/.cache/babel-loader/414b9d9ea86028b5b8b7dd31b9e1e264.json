{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nexport default function useDebouncedCallback(callback, delay, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var maxWait = options.maxWait;\n  var maxWaitHandler = useRef(null);\n  var maxWaitArgs = useRef([]);\n  var leading = options.leading;\n  var wasLeadingCalled = useRef(false);\n  var functionTimeoutHandler = useRef(null);\n  var isComponentUnmounted = useRef(false);\n  var debouncedFunction = useRef(callback);\n  debouncedFunction.current = callback;\n  var cancelDebouncedCallback = useCallback(function () {\n    clearTimeout(functionTimeoutHandler.current);\n    clearTimeout(maxWaitHandler.current);\n    maxWaitHandler.current = null;\n    maxWaitArgs.current = [];\n    functionTimeoutHandler.current = null;\n    wasLeadingCalled.current = false;\n  }, []);\n  useEffect(function () {\n    return function () {\n      // we use flag, as we allow to call callPending outside the hook\n      isComponentUnmounted.current = true;\n    };\n  }, []);\n  var debouncedCallback = useCallback(function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    maxWaitArgs.current = args;\n    clearTimeout(functionTimeoutHandler.current);\n\n    if (!functionTimeoutHandler.current && leading && !wasLeadingCalled.current) {\n      debouncedFunction.current.apply(debouncedFunction, args);\n      wasLeadingCalled.current = true;\n      return;\n    }\n\n    functionTimeoutHandler.current = setTimeout(function () {\n      cancelDebouncedCallback();\n\n      if (!isComponentUnmounted.current) {\n        debouncedFunction.current.apply(debouncedFunction, args);\n      }\n    }, delay);\n\n    if (maxWait && !maxWaitHandler.current) {\n      maxWaitHandler.current = setTimeout(function () {\n        var args = maxWaitArgs.current;\n        cancelDebouncedCallback();\n\n        if (!isComponentUnmounted.current) {\n          debouncedFunction.current.apply(null, args);\n        }\n      }, maxWait);\n    }\n  }, [maxWait, delay, cancelDebouncedCallback, leading]);\n\n  var callPending = function () {\n    // Call pending callback only if we have anything in our queue\n    if (!functionTimeoutHandler.current) {\n      return;\n    }\n\n    debouncedFunction.current.apply(null, maxWaitArgs.current);\n    cancelDebouncedCallback();\n  }; // At the moment, we use 3 args array so that we save backward compatibility\n\n\n  return [debouncedCallback, cancelDebouncedCallback, callPending];\n}","map":null,"metadata":{},"sourceType":"module"}