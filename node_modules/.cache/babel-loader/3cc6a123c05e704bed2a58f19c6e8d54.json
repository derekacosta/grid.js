{"ast":null,"code":"import React from\"react\";import html2canvas from\"html2canvas\";import jsPDF from\"jspdf\";var pxToMm=function pxToMm(px){return Math.floor(px/document.getElementById(\"myMm\").offsetHeight);};var mmToPx=function mmToPx(mm){return mm*document.getElementById(\"myMm\").offsetHeight;};var range=function range(start,end){return Array(end-start).join(\"0\").split(\"0\").map(function(val,id){return id+start;});};var PrintButton=function PrintButton(_ref){var id=_ref.id;return React.createElement(\"div\",{className:\"tc mb4 mt2\"},React.createElement(\"div\",{id:\"myMm\",style:{height:\"1mm\"}}),React.createElement(\"div\",{className:\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\",onClick:function onClick(){var input=document.getElementById(id);var inputHeightMm=pxToMm(input.offsetHeight);var a4WidthMm=210;var a4HeightMm=297;var a4HeightPx=mmToPx(a4HeightMm);var numPages=inputHeightMm<=a4HeightMm?1:Math.floor(inputHeightMm/a4HeightMm)+1;console.log({input:input,inputHeightMm:inputHeightMm,a4HeightMm:a4HeightMm,a4HeightPx:a4HeightPx,numPages:numPages,range:range(0,numPages),comp:inputHeightMm<=a4HeightMm,inputHeightPx:input.offsetHeight});html2canvas(input).then(function(canvas){var imgData=canvas.toDataURL(\"image/png\");var pdf=null;// Document of a4WidthMm wide and inputHeightMm high\nif(inputHeightMm>a4HeightMm){// elongated a4 (system print dialog will handle page breaks)\npdf=new jsPDF(\"l\",\"pt\",[inputHeightMm+16,a4WidthMm]);}else{// standard a4\npdf=new jsPDF();}pdf.addImage(imgData,\"PNG\",0,0);pdf.save(\"\".concat(id,\".pdf\"));});////////////////////////////////////////////////////////\n// System to manually handle page breaks\n// Wasn't able to get it working !\n// The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n// If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n////////////////////////////////////////////////////////\n// range(0, numPages).forEach((page) => {\n//   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n//   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n//     .then((canvas) => {\n//       const imgData = canvas.toDataURL('image/png');\n//       console.log(imgData)\n//       if (page > 0) {\n//         pdf.addPage();\n//       }\n//       pdf.addImage(imgData, 'PNG', 0, 0);\n//     });\n//   ;\n// });\n// setTimeout(() => {\n//   pdf.save(`${id}.pdf`);\n// }, 5000);\n}},\"Test\"));};export default PrintButton;","map":{"version":3,"sources":["/Users/standarduser/Documents/CompSci/Personals/grid.js/src/Print.tsx"],"names":["React","html2canvas","jsPDF","pxToMm","px","Math","floor","document","getElementById","offsetHeight","mmToPx","mm","range","start","end","Array","join","split","map","val","id","PrintButton","height","input","inputHeightMm","a4WidthMm","a4HeightMm","a4HeightPx","numPages","console","log","comp","inputHeightPx","then","canvas","imgData","toDataURL","pdf","addImage","save"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,aAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,EAAD,CAAgB,CAC7B,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWF,EAAE,CAAGG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAiCC,YAAjD,CAAP,CACD,CAFD,CAIA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,EAAD,CAAgB,CAC7B,MAAOA,CAAAA,EAAE,CAAGJ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAiCC,YAA7C,CACD,CAFD,CAIA,GAAMG,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAaC,GAAb,CAA0B,CACtC,MAAOC,CAAAA,KAAK,CAACD,GAAG,CAAGD,KAAP,CAAL,CACJG,IADI,CACC,GADD,EAEJC,KAFI,CAEE,GAFF,EAGJC,GAHI,CAGA,SAASC,GAAT,CAAcC,EAAd,CAAkB,CACrB,MAAOA,CAAAA,EAAE,CAAGP,KAAZ,CACD,CALI,CAAP,CAMD,CAPD,CASA,GAAMQ,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,UAAGD,CAAAA,EAAH,MAAGA,EAAH,OAClB,4BAAK,SAAS,CAAC,YAAf,EAKE,2BAAK,EAAE,CAAC,MAAR,CAAe,KAAK,CAAE,CAAEE,MAAM,CAAE,KAAV,CAAtB,EALF,CAOE,2BACE,SAAS,CAAC,qEADZ,CAEE,OAAO,CAAE,kBAAM,CACb,GAAMC,CAAAA,KAAU,CAAGhB,QAAQ,CAACC,cAAT,CAAwBY,EAAxB,CAAnB,CACA,GAAMI,CAAAA,aAAkB,CAAGrB,MAAM,CAACoB,KAAK,CAAEd,YAAR,CAAjC,CACA,GAAMgB,CAAAA,SAAS,CAAG,GAAlB,CACA,GAAMC,CAAAA,UAAU,CAAG,GAAnB,CACA,GAAMC,CAAAA,UAAU,CAAGjB,MAAM,CAACgB,UAAD,CAAzB,CACA,GAAME,CAAAA,QAAQ,CACZJ,aAAa,EAAIE,UAAjB,CACI,CADJ,CAEIrB,IAAI,CAACC,KAAL,CAAWkB,aAAa,CAAGE,UAA3B,EAAyC,CAH/C,CAIAG,OAAO,CAACC,GAAR,CAAY,CACVP,KAAK,CAALA,KADU,CAEVC,aAAa,CAAbA,aAFU,CAGVE,UAAU,CAAVA,UAHU,CAIVC,UAAU,CAAVA,UAJU,CAKVC,QAAQ,CAARA,QALU,CAMVhB,KAAK,CAAEA,KAAK,CAAC,CAAD,CAAIgB,QAAJ,CANF,CAOVG,IAAI,CAAEP,aAAa,EAAIE,UAPb,CAQVM,aAAa,CAAET,KAAK,CAAEd,YARZ,CAAZ,EAWAR,WAAW,CAACsB,KAAD,CAAX,CAAoBU,IAApB,CAAyB,SAAAC,MAAM,CAAI,CACjC,GAAMC,CAAAA,OAAO,CAAGD,MAAM,CAACE,SAAP,CAAiB,WAAjB,CAAhB,CACA,GAAIC,CAAAA,GAAG,CAAG,IAAV,CACA;AACA,GAAIb,aAAa,CAAGE,UAApB,CAAgC,CAC9B;AACAW,GAAG,CAAG,GAAInC,CAAAA,KAAJ,CAAU,GAAV,CAAe,IAAf,CAAqB,CAACsB,aAAa,CAAG,EAAjB,CAAqBC,SAArB,CAArB,CAAN,CACD,CAHD,IAGO,CACL;AACAY,GAAG,CAAG,GAAInC,CAAAA,KAAJ,EAAN,CACD,CAEDmC,GAAG,CAACC,QAAJ,CAAaH,OAAb,CAAsB,KAAtB,CAA6B,CAA7B,CAAgC,CAAhC,EACAE,GAAG,CAACE,IAAJ,WAAYnB,EAAZ,UACD,CAdD,EAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,CA9DH,SAPF,CADkB,EAApB,CA6EA,cAAeC,CAAAA,WAAf","sourcesContent":["import React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\n\nconst pxToMm = (px: number) => {\n  return Math.floor(px / document.getElementById(\"myMm\")!.offsetHeight);\n};\n\nconst mmToPx = (mm: number) => {\n  return mm * document.getElementById(\"myMm\")!.offsetHeight;\n};\n\nconst range = (start: any, end: any) => {\n  return Array(end - start)\n    .join(\"0\")\n    .split(\"0\")\n    .map(function(val, id) {\n      return id + start;\n    });\n};\n\nconst PrintButton = ({ id }: any) => (\n  <div className=\"tc mb4 mt2\">\n    {/*\n    Getting pixel height in milimeters:\n    https://stackoverflow.com/questions/7650413/pixel-to-mm-equation/27111621#27111621\n  */}\n    <div id=\"myMm\" style={{ height: \"1mm\" }} />\n\n    <div\n      className=\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\"\n      onClick={() => {\n        const input: any = document.getElementById(id);\n        const inputHeightMm: any = pxToMm(input!.offsetHeight);\n        const a4WidthMm = 210;\n        const a4HeightMm = 297;\n        const a4HeightPx = mmToPx(a4HeightMm);\n        const numPages =\n          inputHeightMm <= a4HeightMm\n            ? 1\n            : Math.floor(inputHeightMm / a4HeightMm) + 1;\n        console.log({\n          input,\n          inputHeightMm,\n          a4HeightMm,\n          a4HeightPx,\n          numPages,\n          range: range(0, numPages),\n          comp: inputHeightMm <= a4HeightMm,\n          inputHeightPx: input!.offsetHeight\n        });\n\n        html2canvas(input!).then(canvas => {\n          const imgData = canvas.toDataURL(\"image/png\");\n          let pdf = null;\n          // Document of a4WidthMm wide and inputHeightMm high\n          if (inputHeightMm > a4HeightMm) {\n            // elongated a4 (system print dialog will handle page breaks)\n            pdf = new jsPDF(\"l\", \"pt\", [inputHeightMm + 16, a4WidthMm]);\n          } else {\n            // standard a4\n            pdf = new jsPDF();\n          }\n\n          pdf.addImage(imgData, \"PNG\", 0, 0);\n          pdf.save(`${id}.pdf`);\n        });\n\n        ////////////////////////////////////////////////////////\n        // System to manually handle page breaks\n        // Wasn't able to get it working !\n        // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n        // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n        ////////////////////////////////////////////////////////\n        // range(0, numPages).forEach((page) => {\n        //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n        //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n        //     .then((canvas) => {\n        //       const imgData = canvas.toDataURL('image/png');\n        //       console.log(imgData)\n        //       if (page > 0) {\n        //         pdf.addPage();\n        //       }\n        //       pdf.addImage(imgData, 'PNG', 0, 0);\n        //     });\n        //   ;\n        // });\n\n        // setTimeout(() => {\n        //   pdf.save(`${id}.pdf`);\n        // }, 5000);\n      }}\n    >\n      Test\n    </div>\n  </div>\n);\n\nexport default PrintButton;\n"]},"metadata":{},"sourceType":"module"}