{"version":3,"sources":["Grid/Cell.tsx","Grid/Grid.tsx","Sidebar/Inputs.tsx","Print.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","props","col","cellHeight","cellWidth","isWall","onMouseDown","onMouseEnter","onMouseUp","row","style","mousePressed","width","height","outline","border","display","id","backgroundColor","getInitialGrid","grid","i","currentRow","j","push","createNode","distance","Infinity","isVisited","previousNode","RefreshGrid","newGrid","slice","node","newNode","Grid","useState","setGrid","setMousePressed","useEffect","margin","borderCollapse","tableLayout","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","Inputs","debounceColumn","debounceRow","type","placeholder","String","onChange","e","target","value","PrintButton","className","onClick","px","start","end","input","document","getElementById","inputHeightMm","offsetHeight","Math","floor","a4HeightPx","numPages","console","log","a4HeightMm","range","Array","join","split","val","comp","inputHeightPx","html2canvas","then","canvas","imgData","toDataURL","pdf","jsPDF","addImage","save","Grids","createContainer","window","innerWidth","column","setColumn","innerHeight","setRow","useDebouncedCallback","GridDisplay","grids","useContainer","flex","Print","App","Provider","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ywBAeA,IAyCeA,EAzCe,SAACC,GAAgB,IAE3CC,EASED,EATFC,IACAC,EAQEF,EARFE,WACAC,EAOEH,EAPFG,UACAC,EAMEJ,EANFI,OACAC,EAKEL,EALFK,YACAC,EAIEN,EAJFM,aACAC,EAGEP,EAHFO,UACAC,EAEER,EAFFQ,IAIIC,GAFFT,EADFU,aAGY,CACZC,MAAOR,EAAYA,EAAY,KAAO,OACtCS,OAAQV,EAAaA,EAAa,KAAO,OACzCW,QAAS,gCACTC,OAAQ,gCACRC,QAAS,iBAIX,OACE,wBACEC,GAAE,eAAUR,EAAV,YAAiBP,GAEnBI,YAAa,kBAAMA,EAAYG,EAAKP,IACpCK,aAAc,kBAAMA,EAAaE,EAAKP,IACtCM,UAAW,kBAAMA,KACjBE,MACEL,EAAM,GAEAa,gBAAiB,mBACdR,GAELA,K,8NCtCZ,IAkEMS,EAAiB,SAACjB,EAAUO,GAEhC,IADA,IAAMW,EAAO,GACJC,EAAI,EAAGA,EAAIZ,EAAKY,IAAK,CAE5B,IADA,IAAMC,EAAa,GACVC,EAAI,EAAGA,EAAIrB,EAAKqB,IACvBD,EAAWE,KAAKC,EAAWJ,EAAGE,IAEhCH,EAAKI,KAAKF,GAEZ,OAAOF,GAGHK,EAAa,SAACvB,EAAUO,GAC5B,MAAO,CACLP,MACAO,MAGAiB,SAAUC,IACVC,WAAW,EACXvB,QAAQ,EACRwB,aAAc,OAIZC,EAAc,SAACV,EAAWX,EAAUP,GACxC,IAAM6B,EAAUX,EAAKY,MAAM,GACrBC,EAAOb,EAAKX,GAAKP,GACjBgC,E,yVAAO,IACRD,EADQ,CAEX5B,QAAS4B,EAAK5B,SAGhB,OADA0B,EAAQtB,GAAKP,GAAOgC,EACbH,GAGMI,EAtGe,SAAAlC,GAAU,IAC9BC,EAAoCD,EAApCC,IAAKO,EAA+BR,EAA/BQ,IAAKN,EAA0BF,EAA1BE,WAAYC,EAAcH,EAAdG,UADO,EAGbgC,qBAHa,mBAG9BhB,EAH8B,KAGxBiB,EAHwB,OAKGD,oBAAS,GALZ,mBAK9BzB,EAL8B,KAKhB2B,EALgB,KAMrCC,qBAAU,WACRF,EAAQlB,EAAejB,EAAKO,MAC3B,CAACP,EAAKO,IAgBT,OACI,2BACEC,MAAO,CACLG,OAAQ,MACR2B,OAAQ,SACRxB,QAAS,eACTyB,eAAgB,WAChBC,YAAa,UAGf,+BACGtB,GACCA,EAAKuB,KAAI,SAAClC,EAAUmC,GAAX,OACP,wBAAIC,IAAKD,GACNnC,EAAIkC,KAAI,SAACV,EAAWa,GAAkB,IAC7BrC,EAAqBwB,EAArBxB,IAAKP,EAAgB+B,EAAhB/B,IAAKG,EAAW4B,EAAX5B,OAClB,OACE,kBAAC,EAAD,CACEF,WAAYA,EACZC,UAAWA,EACXyC,IAAKC,EACL5C,IAAKA,EACLO,IAAKA,EACLJ,OAAQA,EACRM,aAAcA,EACdL,YAAa,SAACJ,EAAUO,GAAX,OAvCT,SAACA,EAAUP,GACjCmC,EAAQP,EAAYV,EAAMX,EAAKP,IAC/BoC,GAAgB,GAsCIS,CAAgBtC,EAAKP,IAEvBK,aAAc,SAACL,EAAUO,GAAX,OArCT,SAACA,EAAUP,GAC7BS,GACL0B,EAAQP,EAAYV,EAAMX,EAAKP,IAoCX8C,CAAiBvC,EAAKP,IAExBM,UAAW,SAACN,EAAUO,GAlCxC6B,GAAgB,gBCGLW,EA1BiB,SAAAhD,GAAU,IAChCiD,EAA0CjD,EAA1CiD,eAAgBC,EAA0BlD,EAA1BkD,YAAajD,EAAaD,EAAbC,IAAKO,EAAQR,EAARQ,IAE1C,OACE,oCACE,0CAEE,2BACE2C,KAAK,OACLC,YAAaC,OAAOpD,GACpBqD,SAAU,SAACC,GAAD,OAAYN,EAAeM,EAAEC,OAAOC,WAGlD,6BACA,uCAEE,2BACEN,KAAK,OACLC,YAAaC,OAAO7C,GACpB8C,SAAU,SAACC,GAAD,OAAYL,EAAYK,EAAEC,OAAOC,a,+CCqEtCC,EA7EK,SAAC,GAAD,IAAG1C,EAAH,EAAGA,GAAH,OAClB,yBAAK2C,UAAU,cAKb,yBAAK3C,GAAG,OAAOP,MAAO,CAAEG,OAAQ,SAEhC,yBACE+C,UAAU,sEACVC,QAAS,WACP,IA5BQC,EAQDC,EAAYC,EAoBbC,EAAaC,SAASC,eAAelD,GACrCmD,GA7BEN,EA6B0BG,EAAOI,aA5BxCC,KAAKC,MAAMT,EAAKI,SAASC,eAAe,QAASE,eA+B5CG,EADa,IA1BbN,SAASC,eAAe,QAASE,aA4BjCI,EACJL,GAHiB,IAIb,EACAE,KAAKC,MAAMH,EALE,KAK4B,EAC/CM,QAAQC,IAAI,CACVV,QACAG,gBACAQ,WATiB,IAUjBJ,aACAC,WACAI,OAnCKd,EAmCQ,EAnCIC,EAmCDS,EAlCjBK,MAAMd,EAAMD,GAChBgB,KAAK,KACLC,MAAM,KACNrC,KAAI,SAASsC,EAAKhE,GACjB,OAAOA,EAAK8C,MA+BRmB,KAAMd,GAbW,IAcjBe,cAAelB,EAAOI,eAGxBe,IAAYnB,GAAQoB,MAAK,SAAAC,GACvB,IAAMC,EAAUD,EAAOE,UAAU,aAC7BC,EAAM,MAIRA,EAFErB,EArBa,IAuBT,IAAIsB,IAAM,IAAK,KAAM,CAACtB,EAAgB,GAxB9B,MA2BR,IAAIsB,KAGRC,SAASJ,EAAS,MAAO,EAAG,GAChCE,EAAIG,KAAJ,UAAY3E,EAAZ,cApCN,UCTA4E,EAAQC,aAXE,WAAO,IAAD,EACU1D,mBAASkC,KAAKC,MAAMwB,OAAOC,WAAa,KADlD,mBACXC,EADW,KACHC,EADG,OAEI9D,mBAASkC,KAAKC,MAAMwB,OAAOI,YAAc,KAF7C,mBAEX1F,EAFW,KAEN2F,EAFM,OAGOC,aACvB,SAACpB,GAAD,OAAciB,EAAUjB,KACxB,KAFK/B,EAHW,sBAOImD,aAAqB,SAACpB,GAAD,OAAcmB,EAAOnB,KAAM,KACtE,MAAO,CAAEgB,SAAQxF,MAAKyC,iBAAgBC,YARpB,wBAahBmD,EAAc,WAChB,IAAIC,EAAQV,EAAMW,eAClB,OACE,yBAAK9F,MAAO,CAAEM,QAAS,SACrB,yBAAKN,MAAO,CAAE+F,KAAM,QAClB,kBAAC,EAAD,CACEvG,IAAKqG,EAAMN,OACXxF,IAAK8F,EAAM9F,IACXyC,eAAgBqD,EAAMrD,eACtBC,YAAaoD,EAAMpD,cAErB,6BACA,6BACA,6BACA,kBAAC,EAAD,CACEjD,IAAKqG,EAAMN,OAAS,EACpBxF,IAAK8F,EAAM9F,IAAM,EACjBN,WAAY,GACZC,UAAW,KAEb,6BACA,kBAACsG,EAAD,CAAOzF,GAAI,UAEb,yBAAKP,MAAO,CAAE+F,KAAM,QAClB,kBAAC,EAAD,CACEvG,IAAKqG,EAAMN,OACXxF,IAAK8F,EAAM9F,IACXN,WAAY,GACZC,UAAW,QAkBNuG,EAXO,WACpB,OACE,yBAAK/C,UAAU,OACb,6BACA,kBAACiC,EAAMe,SAAP,KACE,kBAAC,EAAD,SClDYC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShD,SAASC,eAAe,SDmI3C,kBAAmBgD,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.9a8e8948.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\ninterface Props {\n  col: any;\n  cellHeight: any;\n  cellWidth: any;\n  key: any;\n  row: any;\n  isWall: any;\n  onMouseDown: any;\n  onMouseEnter: any;\n  onMouseUp: any;\n  mousePressed: any;\n}\n\nconst Cell: React.FC<Props> = (props: any) => {\n  const {\n    col,\n    cellHeight,\n    cellWidth,\n    isWall,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp,\n    row,\n    mousePressed\n  } = props;\n\n  const style = {\n    width: cellWidth ? cellWidth + \"px\" : \"25px\",\n    height: cellHeight ? cellHeight + \"px\" : \"25px\",\n    outline: \".1px solid rgb(175, 216, 248)\",\n    border: \".1px solid rgb(175, 216, 248)\",\n    display: \"inline-block\"\n    // overflow: \"hidden\"\n  };\n\n  return (\n    <td\n      id={`node-${row}-${col}`}\n      // className={`node ${extraClassName}`}\n      onMouseDown={() => onMouseDown(row, col)}\n      onMouseEnter={() => onMouseEnter(row, col)}\n      onMouseUp={() => onMouseUp()}\n      style={\n        isWall\n          ? {\n              backgroundColor: \"rgb(12, 53, 71)\",\n              ...style\n            }\n          : style\n      }\n    ></td>\n  );\n};\n\nexport default Cell;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { arrayOf, bool, func, number, shape, string } from \"prop-types\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport Cell from \"./Cell\";\n\ninterface Props {\n  col: Number;\n  row: Number;\n  cellHeight: Number;\n  cellWidth: Number;\n}\n\nconst Grid: React.FC<Props> = props => {\n  const { col, row, cellHeight, cellWidth } = props;\n\n  const [grid, setGrid] = useState();\n\n  const [mousePressed, setMousePressed] = useState(false);\n  useEffect(() => {\n    setGrid(getInitialGrid(col, row));\n  }, [col, row]);\n\n  const handleMouseDown = (row: any, col: any) => {\n    setGrid(RefreshGrid(grid, row, col));\n    setMousePressed(true);\n  };\n\n  const handleMouseEnter = (row: any, col: any) => {\n    if (!mousePressed) return;\n    setGrid(RefreshGrid(grid, row, col));\n  };\n\n  const handleMouseUp = () => {\n    setMousePressed(false);\n  };\n\n  return (\n      <table\n        style={{\n          height: \"50%\",\n          margin: \"0 auto\",\n          display: \"inline-block\",\n          borderCollapse: \"collapse\",\n          tableLayout: \"fixed\"\n        }}\n      >\n        <tbody>\n          {grid &&\n            grid.map((row: any, rowIdx: any) => (\n              <tr key={rowIdx}>\n                {row.map((node: any, nodeIdx: any) => {\n                  const { row, col, isWall } = node;\n                  return (\n                    <Cell\n                      cellHeight={cellHeight}\n                      cellWidth={cellWidth}\n                      key={nodeIdx}\n                      col={col}\n                      row={row}\n                      isWall={isWall}\n                      mousePressed={mousePressed}\n                      onMouseDown={(col: any, row: any) =>\n                        handleMouseDown(row, col)\n                      }\n                      onMouseEnter={(col: any, row: any) =>\n                        handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(col: any, row: any) => handleMouseUp()}\n                    />\n                  );\n                })}\n              </tr>\n            ))}\n        </tbody>\n      </table>\n  );\n};\n\nconst getInitialGrid = (col: any, row: any) => {\n  const grid = [];\n  for (let i = 0; i < row; i++) {\n    const currentRow = [];\n    for (let j = 0; j < col; j++) {\n      currentRow.push(createNode(i, j));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col: any, row: any) => {\n  return {\n    col,\n    row,\n    // isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    // isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst RefreshGrid = (grid: any, row: any, col: any) => {\n  const newGrid = grid.slice(0);\n  const node = grid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nexport default Grid;\n","import React from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\ninterface Props {\n  debounceColumn: any;\n  debounceRow: any;\n  col: Number;\n  row: Number;\n}\n\nconst Inputs: React.FC<Props> = props => {\n  const { debounceColumn, debounceRow, col, row } = props;\n\n  return (\n    <>\n      <label>\n        Columns:\n        <input\n          type=\"text\"\n          placeholder={String(col)}\n          onChange={(e: any) => debounceColumn(e.target.value)}\n        />\n      </label>\n      <br />\n      <label>\n        Rows:\n        <input\n          type=\"text\"\n          placeholder={String(row)}\n          onChange={(e: any) => debounceRow(e.target.value)}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Inputs;\n","import React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\n\nconst pxToMm = (px: number) => {\n  return Math.floor(px / document.getElementById(\"myMm\")!.offsetHeight);\n};\n\nconst mmToPx = (mm: number) => {\n  return mm * document.getElementById(\"myMm\")!.offsetHeight;\n};\n\nconst range = (start: any, end: any) => {\n  return Array(end - start)\n    .join(\"0\")\n    .split(\"0\")\n    .map(function(val, id) {\n      return id + start;\n    });\n};\n\nconst PrintButton = ({ id }: any) => (\n  <div className=\"tc mb4 mt2\">\n    {/*\n    Getting pixel height in milimeters:\n    https://stackoverflow.com/questions/7650413/pixel-to-mm-equation/27111621#27111621\n  */}\n    <div id=\"myMm\" style={{ height: \"1mm\" }} />\n\n    <div\n      className=\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\"\n      onClick={() => {\n        const input: any = document.getElementById(id);\n        const inputHeightMm: any = pxToMm(input!.offsetHeight);\n        const a4WidthMm = 210;\n        const a4HeightMm = 297;\n        const a4HeightPx = mmToPx(a4HeightMm);\n        const numPages =\n          inputHeightMm <= a4HeightMm\n            ? 1\n            : Math.floor(inputHeightMm / a4HeightMm) + 1;\n        console.log({\n          input,\n          inputHeightMm,\n          a4HeightMm,\n          a4HeightPx,\n          numPages,\n          range: range(0, numPages),\n          comp: inputHeightMm <= a4HeightMm,\n          inputHeightPx: input!.offsetHeight\n        });\n\n        html2canvas(input!).then(canvas => {\n          const imgData = canvas.toDataURL(\"image/png\");\n          let pdf = null;\n          // Document of a4WidthMm wide and inputHeightMm high\n          if (inputHeightMm > a4HeightMm) {\n            // elongated a4 (system print dialog will handle page breaks)\n            pdf = new jsPDF(\"l\", \"pt\", [inputHeightMm + 16, a4WidthMm]);\n          } else {\n            // standard a4\n            pdf = new jsPDF();\n          }\n\n          pdf.addImage(imgData, \"PNG\", 0, 0);\n          pdf.save(`${id}.pdf`);\n        });\n\n        ////////////////////////////////////////////////////////\n        // System to manually handle page breaks\n        // Wasn't able to get it working !\n        // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n        // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n        ////////////////////////////////////////////////////////\n        // range(0, numPages).forEach((page) => {\n        //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n        //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n        //     .then((canvas) => {\n        //       const imgData = canvas.toDataURL('image/png');\n        //       console.log(imgData)\n        //       if (page > 0) {\n        //         pdf.addPage();\n        //       }\n        //       pdf.addImage(imgData, 'PNG', 0, 0);\n        //     });\n        //   ;\n        // });\n\n        // setTimeout(() => {\n        //   pdf.save(`${id}.pdf`);\n        // }, 5000);\n      }}\n    >\n      Test\n    </div>\n  </div>\n);\n\nexport default PrintButton;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Grid from \"./Grid/Grid\";\nimport Inputs from \"./Sidebar/Inputs\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { createContainer } from \"unstated-next\";\nimport Print from \"./Print\";\n\nlet useGrid = () => {\n  const [column, setColumn] = useState(Math.floor(window.innerWidth / 40));\n  const [row, setRow] = useState(Math.floor(window.innerHeight / 30));\n  const [debounceColumn] = useDebouncedCallback(\n    (val: any) => setColumn(val),\n    500\n  );\n  const [debounceRow] = useDebouncedCallback((val: any) => setRow(val), 500);\n  return { column, row, debounceColumn, debounceRow };\n};\n\nlet Grids = createContainer(useGrid);\n\nlet GridDisplay = () => {\n  let grids = Grids.useContainer();\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={{ flex: \"30%\" }}>\n        <Inputs\n          col={grids.column}\n          row={grids.row}\n          debounceColumn={grids.debounceColumn}\n          debounceRow={grids.debounceRow}\n        />\n        <br />\n        <br />\n        <br />\n        <Grid\n          col={grids.column / 4}\n          row={grids.row / 4}\n          cellHeight={25}\n          cellWidth={25}\n        />\n        <br />\n        <Print id={\"grid\"} />\n      </div>\n      <div style={{ flex: \"70%\" }}>\n        <Grid\n          col={grids.column}\n          row={grids.row}\n          cellHeight={25}\n          cellWidth={25}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <br />\n      <Grids.Provider>\n        <GridDisplay />\n      </Grids.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}